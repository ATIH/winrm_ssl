require "puppet"
require "openssl"
require "open3"
require "tempfile"

Puppet.initialize_settings

# input for p12 format
file_hostcert = File.read(Puppet[:hostcert])
file_hostprivkey = File.read(Puppet[:hostprivkey])
openssl_pass = "42"
openssl_name = nil

# make p12
openssl_key = OpenSSL::PKey::RSA.new(file_hostprivkey)
openssl_cert = OpenSSL::X509::Certificate.new(file_hostcert)
openssl_pkcs12 = OpenSSL::PKCS12.create(openssl_pass, openssl_name, openssl_key, openssl_cert)

# write p12
file_p12 = Tempfile.new("winrm_https_puppetca_hostcert_p12")
file_p12.binmode
file_p12.write(openssl_pkcs12.to_der)
file_p12.close

# remember certificate thumbprint
intended_thumbprint = (OpenSSL::Digest::SHA1.new(openssl_cert.to_der)).to_s

# see if a certificate by that thumbprint is in certlm
var_cmd = "certutil.exe -verifystore My #{intended_thumbprint}"
stdin, stdout, stderr, wait_thr = Open3.popen3(var_cmd)
var_rc = wait_thr.value.exitstatus

# not in certificate store
if (var_rc != 0)
  # so install it
  var_cmd = "certutil -p #{openssl_pass} -importpfx #{file_p12.path}"
  stdin, stdout, stderr, wait_thr = Open3.popen3(var_cmd)
  var_rc = wait_thr.value.exitstatus
  
  if (var_rc !=0)
    raise "#{var_cmd}\n#{stdout.read}\n#{stderr.read}"
  end
end

# see if a winrm https listener is already configured
var_cmd = "winrm.cmd enumerate winrm/config/listener"
var_rgx = /CertificateThumbprint = ([0-9A-Fa-f]{40,40})$/

stdin, stdout, stderr, wait_thr = Open3.popen3(var_cmd)
var_rc = wait_thr.value.exitstatus
var_stdout = stdout.read

rgx_mth = var_rgx.match(var_stdout)

# https is enabled
if (rgx_mth != nil)
  active_thumbprint = rgx_mth[1]
  
  # and it is not with the intended certificate
  if (intended_thumbprint.casecmp(active_thumbprint) != 0)

    # therefore we shall delete this listener
    var_cmd = "winrm delete winrm/config/listener?Address=*+Transport=HTTPS"
    stdin, stdout, stderr, wait_thr = Open3.popen3(var_cmd)
    var_rc = wait_thr.value.exitstatus
    
    if (var_rc !=0)
      raise "#{var_cmd}\n#{stdout.read}\n#{stderr.read}"
    end
    
    # no matches now ;)
    rgx_mth = nil
  end
end

# https not enabled
if (rgx_mth == nil)
  var_cmd = "winrm create winrm/config/listener?Address=*+Transport=HTTPS @{Hostname=\"#{Facter.value(:fqdn)}\";CertificateThumbprint=\"#{intended_thumbprint}\"}"
  stdin, stdout, stderr, wait_thr = Open3.popen3(var_cmd)
  var_rc = wait_thr.value.exitstatus
  
  if (var_rc !=0)
    raise "#{var_cmd}\n#{stdout.read}\n#{stderr.read}"
  end
end
